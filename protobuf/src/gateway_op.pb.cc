// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway_op.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gateway_op.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nway_fs_opterator {

namespace {

const ::google::protobuf::Descriptor* nway_gateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nway_gateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_nway_gateways_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_nway_gateways_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_nway_gateways_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_nway_gateways_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_nway_gateway_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_nway_gateway_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_nway_gateway_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_nway_gateway_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* edit_nway_gateway_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  edit_nway_gateway_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* edit_nway_gateway_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  edit_nway_gateway_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* erase_nway_gateway_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  erase_nway_gateway_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* erase_nway_gateway_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  erase_nway_gateway_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* reload_gateway_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reload_gateway_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* reload_gateway_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reload_gateway_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* nway_op_status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gateway_5fop_2eproto() {
  protobuf_AddDesc_gateway_5fop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gateway_op.proto");
  GOOGLE_CHECK(file != NULL);
  nway_gateway_descriptor_ = file->message_type(0);
  static const int nway_gateway_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, gateway_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, realm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, from_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, from_domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, proxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, expire_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, register_transport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, retry_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, caller_id_in_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, contact_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, register_proxy_),
  };
  nway_gateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nway_gateway_descriptor_,
      nway_gateway::default_instance_,
      nway_gateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nway_gateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nway_gateway));
  get_nway_gateways_req_descriptor_ = file->message_type(1);
  static const int get_nway_gateways_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_req, falg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_req, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_req, number_per_page_),
  };
  get_nway_gateways_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_nway_gateways_req_descriptor_,
      get_nway_gateways_req::default_instance_,
      get_nway_gateways_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_nway_gateways_req));
  get_nway_gateways_rsp_descriptor_ = file->message_type(2);
  static const int get_nway_gateways_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_rsp, gateways_),
  };
  get_nway_gateways_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_nway_gateways_rsp_descriptor_,
      get_nway_gateways_rsp::default_instance_,
      get_nway_gateways_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_nway_gateways_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_nway_gateways_rsp));
  add_nway_gateway_req_descriptor_ = file->message_type(3);
  static const int add_nway_gateway_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_req, gateway_),
  };
  add_nway_gateway_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_nway_gateway_req_descriptor_,
      add_nway_gateway_req::default_instance_,
      add_nway_gateway_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_nway_gateway_req));
  add_nway_gateway_rsp_descriptor_ = file->message_type(4);
  static const int add_nway_gateway_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_rsp, gateway_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_rsp, res_text_),
  };
  add_nway_gateway_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_nway_gateway_rsp_descriptor_,
      add_nway_gateway_rsp::default_instance_,
      add_nway_gateway_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_nway_gateway_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_nway_gateway_rsp));
  edit_nway_gateway_req_descriptor_ = file->message_type(5);
  static const int edit_nway_gateway_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_req, gateway_),
  };
  edit_nway_gateway_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      edit_nway_gateway_req_descriptor_,
      edit_nway_gateway_req::default_instance_,
      edit_nway_gateway_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(edit_nway_gateway_req));
  edit_nway_gateway_rsp_descriptor_ = file->message_type(6);
  static const int edit_nway_gateway_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_rsp, gateway_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_rsp, res_text_),
  };
  edit_nway_gateway_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      edit_nway_gateway_rsp_descriptor_,
      edit_nway_gateway_rsp::default_instance_,
      edit_nway_gateway_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(edit_nway_gateway_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(edit_nway_gateway_rsp));
  erase_nway_gateway_req_descriptor_ = file->message_type(7);
  static const int erase_nway_gateway_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_req, gateway_),
  };
  erase_nway_gateway_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      erase_nway_gateway_req_descriptor_,
      erase_nway_gateway_req::default_instance_,
      erase_nway_gateway_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(erase_nway_gateway_req));
  erase_nway_gateway_rsp_descriptor_ = file->message_type(8);
  static const int erase_nway_gateway_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_rsp, gateway_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_rsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_rsp, res_text_),
  };
  erase_nway_gateway_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      erase_nway_gateway_rsp_descriptor_,
      erase_nway_gateway_rsp::default_instance_,
      erase_nway_gateway_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(erase_nway_gateway_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(erase_nway_gateway_rsp));
  reload_gateway_req_descriptor_ = file->message_type(9);
  static const int reload_gateway_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_req, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_req, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_req, password_),
  };
  reload_gateway_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reload_gateway_req_descriptor_,
      reload_gateway_req::default_instance_,
      reload_gateway_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reload_gateway_req));
  reload_gateway_rsp_descriptor_ = file->message_type(10);
  static const int reload_gateway_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_rsp, status_),
  };
  reload_gateway_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reload_gateway_rsp_descriptor_,
      reload_gateway_rsp::default_instance_,
      reload_gateway_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reload_gateway_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reload_gateway_rsp));
  nway_op_status_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gateway_5fop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nway_gateway_descriptor_, &nway_gateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_nway_gateways_req_descriptor_, &get_nway_gateways_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_nway_gateways_rsp_descriptor_, &get_nway_gateways_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_nway_gateway_req_descriptor_, &add_nway_gateway_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_nway_gateway_rsp_descriptor_, &add_nway_gateway_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    edit_nway_gateway_req_descriptor_, &edit_nway_gateway_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    edit_nway_gateway_rsp_descriptor_, &edit_nway_gateway_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    erase_nway_gateway_req_descriptor_, &erase_nway_gateway_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    erase_nway_gateway_rsp_descriptor_, &erase_nway_gateway_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reload_gateway_req_descriptor_, &reload_gateway_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reload_gateway_rsp_descriptor_, &reload_gateway_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gateway_5fop_2eproto() {
  delete nway_gateway::default_instance_;
  delete nway_gateway_reflection_;
  delete get_nway_gateways_req::default_instance_;
  delete get_nway_gateways_req_reflection_;
  delete get_nway_gateways_rsp::default_instance_;
  delete get_nway_gateways_rsp_reflection_;
  delete add_nway_gateway_req::default_instance_;
  delete add_nway_gateway_req_reflection_;
  delete add_nway_gateway_rsp::default_instance_;
  delete add_nway_gateway_rsp_reflection_;
  delete edit_nway_gateway_req::default_instance_;
  delete edit_nway_gateway_req_reflection_;
  delete edit_nway_gateway_rsp::default_instance_;
  delete edit_nway_gateway_rsp_reflection_;
  delete erase_nway_gateway_req::default_instance_;
  delete erase_nway_gateway_req_reflection_;
  delete erase_nway_gateway_rsp::default_instance_;
  delete erase_nway_gateway_rsp_reflection_;
  delete reload_gateway_req::default_instance_;
  delete reload_gateway_req_reflection_;
  delete reload_gateway_rsp::default_instance_;
  delete reload_gateway_rsp_reflection_;
}

void protobuf_AddDesc_gateway_5fop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020gateway_op.proto\022\021nway_fs_opterator\"\351\002"
    "\n\014nway_gateway\022\024\n\014gateway_name\030\001 \002(\t\022\020\n\010"
    "username\030\002 \001(\t\022\r\n\005realm\030\003 \001(\t\022\021\n\tfrom_us"
    "er\030\004 \001(\t\022\023\n\013from_domain\030\005 \001(\t\022\020\n\010passwor"
    "d\030\006 \001(\t\022\021\n\textension\030\007 \001(\t\022\r\n\005proxy\030\010 \001("
    "\t\022\026\n\016expire_seconds\030\t \001(\t\022\020\n\010register\030\n "
    "\001(\t\022\032\n\022register_transport\030\013 \001(\t\022\025\n\rretry"
    "_seconds\030\014 \001(\t\022\031\n\021caller_id_in_from\030\r \001("
    "\t\022\026\n\016contact_params\030\016 \001(\t\022\014\n\004ping\030\017 \001(\t\022"
    "\020\n\010filename\030\020 \001(\t\022\026\n\016register_proxy\030\021 \001("
    "\t\"Q\n\025get_nway_gateways_req\022\014\n\004falg\030\001 \002(\t"
    "\022\021\n\tstart_pos\030\002 \002(\005\022\027\n\017number_per_page\030\003"
    " \002(\005\"}\n\025get_nway_gateways_rsp\0221\n\006status\030"
    "\001 \002(\0162!.nway_fs_opterator.nway_op_status"
    "\0221\n\010gateways\030\002 \003(\0132\037.nway_fs_opterator.n"
    "way_gateway\"H\n\024add_nway_gateway_req\0220\n\007g"
    "ateway\030\001 \002(\0132\037.nway_fs_opterator.nway_ga"
    "teway\"q\n\024add_nway_gateway_rsp\022\024\n\014gateway"
    "_name\030\001 \002(\t\0221\n\006status\030\002 \002(\0162!.nway_fs_op"
    "terator.nway_op_status\022\020\n\010res_text\030\003 \001(\t"
    "\"I\n\025edit_nway_gateway_req\0220\n\007gateway\030\001 \002"
    "(\0132\037.nway_fs_opterator.nway_gateway\"r\n\025e"
    "dit_nway_gateway_rsp\022\024\n\014gateway_name\030\001 \002"
    "(\t\0221\n\006status\030\002 \002(\0162!.nway_fs_opterator.n"
    "way_op_status\022\020\n\010res_text\030\003 \001(\t\"J\n\026erase"
    "_nway_gateway_req\0220\n\007gateway\030\001 \002(\0132\037.nwa"
    "y_fs_opterator.nway_gateway\"s\n\026erase_nwa"
    "y_gateway_rsp\022\024\n\014gateway_name\030\001 \002(\t\0221\n\006s"
    "tatus\030\002 \002(\0162!.nway_fs_opterator.nway_op_"
    "status\022\020\n\010res_text\030\003 \001(\t\"B\n\022reload_gatew"
    "ay_req\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\022\020\n\010pa"
    "ssword\030\003 \001(\t\"G\n\022reload_gateway_rsp\0221\n\006st"
    "atus\030\001 \002(\0162!.nway_fs_opterator.nway_op_s"
    "tatus*C\n\016nway_op_status\022\013\n\007success\020\001\022\n\n\006"
    "failed\020\002\022\014\n\010notfound\020\003\022\n\n\006unknow\020\004", 1394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gateway_op.proto", &protobuf_RegisterTypes);
  nway_gateway::default_instance_ = new nway_gateway();
  get_nway_gateways_req::default_instance_ = new get_nway_gateways_req();
  get_nway_gateways_rsp::default_instance_ = new get_nway_gateways_rsp();
  add_nway_gateway_req::default_instance_ = new add_nway_gateway_req();
  add_nway_gateway_rsp::default_instance_ = new add_nway_gateway_rsp();
  edit_nway_gateway_req::default_instance_ = new edit_nway_gateway_req();
  edit_nway_gateway_rsp::default_instance_ = new edit_nway_gateway_rsp();
  erase_nway_gateway_req::default_instance_ = new erase_nway_gateway_req();
  erase_nway_gateway_rsp::default_instance_ = new erase_nway_gateway_rsp();
  reload_gateway_req::default_instance_ = new reload_gateway_req();
  reload_gateway_rsp::default_instance_ = new reload_gateway_rsp();
  nway_gateway::default_instance_->InitAsDefaultInstance();
  get_nway_gateways_req::default_instance_->InitAsDefaultInstance();
  get_nway_gateways_rsp::default_instance_->InitAsDefaultInstance();
  add_nway_gateway_req::default_instance_->InitAsDefaultInstance();
  add_nway_gateway_rsp::default_instance_->InitAsDefaultInstance();
  edit_nway_gateway_req::default_instance_->InitAsDefaultInstance();
  edit_nway_gateway_rsp::default_instance_->InitAsDefaultInstance();
  erase_nway_gateway_req::default_instance_->InitAsDefaultInstance();
  erase_nway_gateway_rsp::default_instance_->InitAsDefaultInstance();
  reload_gateway_req::default_instance_->InitAsDefaultInstance();
  reload_gateway_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gateway_5fop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gateway_5fop_2eproto {
  StaticDescriptorInitializer_gateway_5fop_2eproto() {
    protobuf_AddDesc_gateway_5fop_2eproto();
  }
} static_descriptor_initializer_gateway_5fop_2eproto_;
const ::google::protobuf::EnumDescriptor* nway_op_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nway_op_status_descriptor_;
}
bool nway_op_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int nway_gateway::kGatewayNameFieldNumber;
const int nway_gateway::kUsernameFieldNumber;
const int nway_gateway::kRealmFieldNumber;
const int nway_gateway::kFromUserFieldNumber;
const int nway_gateway::kFromDomainFieldNumber;
const int nway_gateway::kPasswordFieldNumber;
const int nway_gateway::kExtensionFieldNumber;
const int nway_gateway::kProxyFieldNumber;
const int nway_gateway::kExpireSecondsFieldNumber;
const int nway_gateway::kRegisterFieldNumber;
const int nway_gateway::kRegisterTransportFieldNumber;
const int nway_gateway::kRetrySecondsFieldNumber;
const int nway_gateway::kCallerIdInFromFieldNumber;
const int nway_gateway::kContactParamsFieldNumber;
const int nway_gateway::kPingFieldNumber;
const int nway_gateway::kFilenameFieldNumber;
const int nway_gateway::kRegisterProxyFieldNumber;
#endif  // !_MSC_VER

nway_gateway::nway_gateway()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.nway_gateway)
}

void nway_gateway::InitAsDefaultInstance() {
}

nway_gateway::nway_gateway(const nway_gateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.nway_gateway)
}

void nway_gateway::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateway_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_seconds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_transport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retry_seconds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_id_in_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_proxy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nway_gateway::~nway_gateway() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.nway_gateway)
  SharedDtor();
}

void nway_gateway::SharedDtor() {
  if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gateway_name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (realm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realm_;
  }
  if (from_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_;
  }
  if (from_domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_domain_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (extension_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extension_;
  }
  if (proxy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxy_;
  }
  if (expire_seconds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete expire_seconds_;
  }
  if (register__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register__;
  }
  if (register_transport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_transport_;
  }
  if (retry_seconds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retry_seconds_;
  }
  if (caller_id_in_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caller_id_in_from_;
  }
  if (contact_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contact_params_;
  }
  if (ping_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ping_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (register_proxy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_proxy_;
  }
  if (this != default_instance_) {
  }
}

void nway_gateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nway_gateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nway_gateway_descriptor_;
}

const nway_gateway& nway_gateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

nway_gateway* nway_gateway::default_instance_ = NULL;

nway_gateway* nway_gateway::New() const {
  return new nway_gateway;
}

void nway_gateway::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_gateway_name()) {
      if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gateway_name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_realm()) {
      if (realm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        realm_->clear();
      }
    }
    if (has_from_user()) {
      if (from_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_user_->clear();
      }
    }
    if (has_from_domain()) {
      if (from_domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_domain_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_extension()) {
      if (extension_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extension_->clear();
      }
    }
    if (has_proxy()) {
      if (proxy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxy_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_expire_seconds()) {
      if (expire_seconds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        expire_seconds_->clear();
      }
    }
    if (has_register_()) {
      if (register__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register__->clear();
      }
    }
    if (has_register_transport()) {
      if (register_transport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register_transport_->clear();
      }
    }
    if (has_retry_seconds()) {
      if (retry_seconds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retry_seconds_->clear();
      }
    }
    if (has_caller_id_in_from()) {
      if (caller_id_in_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caller_id_in_from_->clear();
      }
    }
    if (has_contact_params()) {
      if (contact_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contact_params_->clear();
      }
    }
    if (has_ping()) {
      if (ping_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ping_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }
  if (has_register_proxy()) {
    if (register_proxy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      register_proxy_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nway_gateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.nway_gateway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gateway_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gateway_name().data(), this->gateway_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gateway_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_realm;
        break;
      }

      // optional string realm = 3;
      case 3: {
        if (tag == 26) {
         parse_realm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realm().data(), this->realm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "realm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from_user;
        break;
      }

      // optional string from_user = 4;
      case 4: {
        if (tag == 34) {
         parse_from_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_user().data(), this->from_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from_domain;
        break;
      }

      // optional string from_domain = 5;
      case 5: {
        if (tag == 42) {
         parse_from_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_domain().data(), this->from_domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (tag == 50) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extension;
        break;
      }

      // optional string extension = 7;
      case 7: {
        if (tag == 58) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extension().data(), this->extension().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extension");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_proxy;
        break;
      }

      // optional string proxy = 8;
      case 8: {
        if (tag == 66) {
         parse_proxy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy().data(), this->proxy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_expire_seconds;
        break;
      }

      // optional string expire_seconds = 9;
      case 9: {
        if (tag == 74) {
         parse_expire_seconds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_seconds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->expire_seconds().data(), this->expire_seconds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "expire_seconds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_register;
        break;
      }

      // optional string register = 10;
      case 10: {
        if (tag == 82) {
         parse_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_().data(), this->register_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_register_transport;
        break;
      }

      // optional string register_transport = 11;
      case 11: {
        if (tag == 90) {
         parse_register_transport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_transport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_transport().data(), this->register_transport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_transport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_retry_seconds;
        break;
      }

      // optional string retry_seconds = 12;
      case 12: {
        if (tag == 98) {
         parse_retry_seconds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_seconds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retry_seconds().data(), this->retry_seconds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retry_seconds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_caller_id_in_from;
        break;
      }

      // optional string caller_id_in_from = 13;
      case 13: {
        if (tag == 106) {
         parse_caller_id_in_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller_id_in_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caller_id_in_from().data(), this->caller_id_in_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caller_id_in_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_contact_params;
        break;
      }

      // optional string contact_params = 14;
      case 14: {
        if (tag == 114) {
         parse_contact_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contact_params().data(), this->contact_params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ping;
        break;
      }

      // optional string ping = 15;
      case 15: {
        if (tag == 122) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ping().data(), this->ping().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ping");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_filename;
        break;
      }

      // optional string filename = 16;
      case 16: {
        if (tag == 130) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_register_proxy;
        break;
      }

      // optional string register_proxy = 17;
      case 17: {
        if (tag == 138) {
         parse_register_proxy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_proxy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_proxy().data(), this->register_proxy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_proxy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.nway_gateway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.nway_gateway)
  return false;
#undef DO_
}

void nway_gateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.nway_gateway)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_name(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string realm = 3;
  if (has_realm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realm().data(), this->realm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->realm(), output);
  }

  // optional string from_user = 4;
  if (has_from_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_user().data(), this->from_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_user(), output);
  }

  // optional string from_domain = 5;
  if (has_from_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_domain().data(), this->from_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_domain(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // optional string extension = 7;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extension(), output);
  }

  // optional string proxy = 8;
  if (has_proxy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy().data(), this->proxy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->proxy(), output);
  }

  // optional string expire_seconds = 9;
  if (has_expire_seconds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expire_seconds().data(), this->expire_seconds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expire_seconds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->expire_seconds(), output);
  }

  // optional string register = 10;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_().data(), this->register_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->register_(), output);
  }

  // optional string register_transport = 11;
  if (has_register_transport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_transport().data(), this->register_transport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_transport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->register_transport(), output);
  }

  // optional string retry_seconds = 12;
  if (has_retry_seconds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retry_seconds().data(), this->retry_seconds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retry_seconds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->retry_seconds(), output);
  }

  // optional string caller_id_in_from = 13;
  if (has_caller_id_in_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caller_id_in_from().data(), this->caller_id_in_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caller_id_in_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->caller_id_in_from(), output);
  }

  // optional string contact_params = 14;
  if (has_contact_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_params().data(), this->contact_params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->contact_params(), output);
  }

  // optional string ping = 15;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->ping(), output);
  }

  // optional string filename = 16;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->filename(), output);
  }

  // optional string register_proxy = 17;
  if (has_register_proxy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_proxy().data(), this->register_proxy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_proxy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->register_proxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.nway_gateway)
}

::google::protobuf::uint8* nway_gateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.nway_gateway)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_name(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string realm = 3;
  if (has_realm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realm().data(), this->realm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->realm(), target);
  }

  // optional string from_user = 4;
  if (has_from_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_user().data(), this->from_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_user(), target);
  }

  // optional string from_domain = 5;
  if (has_from_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_domain().data(), this->from_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from_domain(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional string extension = 7;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extension(), target);
  }

  // optional string proxy = 8;
  if (has_proxy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy().data(), this->proxy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->proxy(), target);
  }

  // optional string expire_seconds = 9;
  if (has_expire_seconds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expire_seconds().data(), this->expire_seconds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expire_seconds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->expire_seconds(), target);
  }

  // optional string register = 10;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_().data(), this->register_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->register_(), target);
  }

  // optional string register_transport = 11;
  if (has_register_transport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_transport().data(), this->register_transport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_transport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->register_transport(), target);
  }

  // optional string retry_seconds = 12;
  if (has_retry_seconds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retry_seconds().data(), this->retry_seconds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retry_seconds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->retry_seconds(), target);
  }

  // optional string caller_id_in_from = 13;
  if (has_caller_id_in_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caller_id_in_from().data(), this->caller_id_in_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caller_id_in_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->caller_id_in_from(), target);
  }

  // optional string contact_params = 14;
  if (has_contact_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_params().data(), this->contact_params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->contact_params(), target);
  }

  // optional string ping = 15;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ping(), target);
  }

  // optional string filename = 16;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->filename(), target);
  }

  // optional string register_proxy = 17;
  if (has_register_proxy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_proxy().data(), this->register_proxy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_proxy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->register_proxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.nway_gateway)
  return target;
}

int nway_gateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gateway_name = 1;
    if (has_gateway_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway_name());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string realm = 3;
    if (has_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realm());
    }

    // optional string from_user = 4;
    if (has_from_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user());
    }

    // optional string from_domain = 5;
    if (has_from_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_domain());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string extension = 7;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension());
    }

    // optional string proxy = 8;
    if (has_proxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string expire_seconds = 9;
    if (has_expire_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expire_seconds());
    }

    // optional string register = 10;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_());
    }

    // optional string register_transport = 11;
    if (has_register_transport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_transport());
    }

    // optional string retry_seconds = 12;
    if (has_retry_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retry_seconds());
    }

    // optional string caller_id_in_from = 13;
    if (has_caller_id_in_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caller_id_in_from());
    }

    // optional string contact_params = 14;
    if (has_contact_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_params());
    }

    // optional string ping = 15;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ping());
    }

    // optional string filename = 16;
    if (has_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string register_proxy = 17;
    if (has_register_proxy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_proxy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nway_gateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nway_gateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nway_gateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nway_gateway::MergeFrom(const nway_gateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway_name()) {
      set_gateway_name(from.gateway_name());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_realm()) {
      set_realm(from.realm());
    }
    if (from.has_from_user()) {
      set_from_user(from.from_user());
    }
    if (from.has_from_domain()) {
      set_from_domain(from.from_domain());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_extension()) {
      set_extension(from.extension());
    }
    if (from.has_proxy()) {
      set_proxy(from.proxy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire_seconds()) {
      set_expire_seconds(from.expire_seconds());
    }
    if (from.has_register_()) {
      set_register_(from.register_());
    }
    if (from.has_register_transport()) {
      set_register_transport(from.register_transport());
    }
    if (from.has_retry_seconds()) {
      set_retry_seconds(from.retry_seconds());
    }
    if (from.has_caller_id_in_from()) {
      set_caller_id_in_from(from.caller_id_in_from());
    }
    if (from.has_contact_params()) {
      set_contact_params(from.contact_params());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_register_proxy()) {
      set_register_proxy(from.register_proxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nway_gateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nway_gateway::CopyFrom(const nway_gateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nway_gateway::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void nway_gateway::Swap(nway_gateway* other) {
  if (other != this) {
    std::swap(gateway_name_, other->gateway_name_);
    std::swap(username_, other->username_);
    std::swap(realm_, other->realm_);
    std::swap(from_user_, other->from_user_);
    std::swap(from_domain_, other->from_domain_);
    std::swap(password_, other->password_);
    std::swap(extension_, other->extension_);
    std::swap(proxy_, other->proxy_);
    std::swap(expire_seconds_, other->expire_seconds_);
    std::swap(register__, other->register__);
    std::swap(register_transport_, other->register_transport_);
    std::swap(retry_seconds_, other->retry_seconds_);
    std::swap(caller_id_in_from_, other->caller_id_in_from_);
    std::swap(contact_params_, other->contact_params_);
    std::swap(ping_, other->ping_);
    std::swap(filename_, other->filename_);
    std::swap(register_proxy_, other->register_proxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nway_gateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nway_gateway_descriptor_;
  metadata.reflection = nway_gateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_nway_gateways_req::kFalgFieldNumber;
const int get_nway_gateways_req::kStartPosFieldNumber;
const int get_nway_gateways_req::kNumberPerPageFieldNumber;
#endif  // !_MSC_VER

get_nway_gateways_req::get_nway_gateways_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.get_nway_gateways_req)
}

void get_nway_gateways_req::InitAsDefaultInstance() {
}

get_nway_gateways_req::get_nway_gateways_req(const get_nway_gateways_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.get_nway_gateways_req)
}

void get_nway_gateways_req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  falg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_ = 0;
  number_per_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_nway_gateways_req::~get_nway_gateways_req() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.get_nway_gateways_req)
  SharedDtor();
}

void get_nway_gateways_req::SharedDtor() {
  if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete falg_;
  }
  if (this != default_instance_) {
  }
}

void get_nway_gateways_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_nway_gateways_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_nway_gateways_req_descriptor_;
}

const get_nway_gateways_req& get_nway_gateways_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

get_nway_gateways_req* get_nway_gateways_req::default_instance_ = NULL;

get_nway_gateways_req* get_nway_gateways_req::New() const {
  return new get_nway_gateways_req;
}

void get_nway_gateways_req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<get_nway_gateways_req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_pos_, number_per_page_);
    if (has_falg()) {
      if (falg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        falg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_nway_gateways_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.get_nway_gateways_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string falg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_falg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->falg().data(), this->falg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "falg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_pos;
        break;
      }

      // required int32 start_pos = 2;
      case 2: {
        if (tag == 16) {
         parse_start_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_pos_)));
          set_has_start_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number_per_page;
        break;
      }

      // required int32 number_per_page = 3;
      case 3: {
        if (tag == 24) {
         parse_number_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_per_page_)));
          set_has_number_per_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.get_nway_gateways_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.get_nway_gateways_req)
  return false;
#undef DO_
}

void get_nway_gateways_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.get_nway_gateways_req)
  // required string falg = 1;
  if (has_falg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->falg().data(), this->falg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "falg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->falg(), output);
  }

  // required int32 start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_pos(), output);
  }

  // required int32 number_per_page = 3;
  if (has_number_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number_per_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.get_nway_gateways_req)
}

::google::protobuf::uint8* get_nway_gateways_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.get_nway_gateways_req)
  // required string falg = 1;
  if (has_falg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->falg().data(), this->falg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "falg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->falg(), target);
  }

  // required int32 start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_pos(), target);
  }

  // required int32 number_per_page = 3;
  if (has_number_per_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number_per_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.get_nway_gateways_req)
  return target;
}

int get_nway_gateways_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string falg = 1;
    if (has_falg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->falg());
    }

    // required int32 start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_pos());
    }

    // required int32 number_per_page = 3;
    if (has_number_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_per_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_nway_gateways_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_nway_gateways_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_nway_gateways_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_nway_gateways_req::MergeFrom(const get_nway_gateways_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_falg()) {
      set_falg(from.falg());
    }
    if (from.has_start_pos()) {
      set_start_pos(from.start_pos());
    }
    if (from.has_number_per_page()) {
      set_number_per_page(from.number_per_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_nway_gateways_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_nway_gateways_req::CopyFrom(const get_nway_gateways_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_nway_gateways_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void get_nway_gateways_req::Swap(get_nway_gateways_req* other) {
  if (other != this) {
    std::swap(falg_, other->falg_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(number_per_page_, other->number_per_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_nway_gateways_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_nway_gateways_req_descriptor_;
  metadata.reflection = get_nway_gateways_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_nway_gateways_rsp::kStatusFieldNumber;
const int get_nway_gateways_rsp::kGatewaysFieldNumber;
#endif  // !_MSC_VER

get_nway_gateways_rsp::get_nway_gateways_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.get_nway_gateways_rsp)
}

void get_nway_gateways_rsp::InitAsDefaultInstance() {
}

get_nway_gateways_rsp::get_nway_gateways_rsp(const get_nway_gateways_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.get_nway_gateways_rsp)
}

void get_nway_gateways_rsp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_nway_gateways_rsp::~get_nway_gateways_rsp() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.get_nway_gateways_rsp)
  SharedDtor();
}

void get_nway_gateways_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_nway_gateways_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_nway_gateways_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_nway_gateways_rsp_descriptor_;
}

const get_nway_gateways_rsp& get_nway_gateways_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

get_nway_gateways_rsp* get_nway_gateways_rsp::default_instance_ = NULL;

get_nway_gateways_rsp* get_nway_gateways_rsp::New() const {
  return new get_nway_gateways_rsp;
}

void get_nway_gateways_rsp::Clear() {
  status_ = 1;
  gateways_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_nway_gateways_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.get_nway_gateways_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nway_fs_opterator.nway_op_status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nway_fs_opterator::nway_op_status_IsValid(value)) {
            set_status(static_cast< ::nway_fs_opterator::nway_op_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gateways;
        break;
      }

      // repeated .nway_fs_opterator.nway_gateway gateways = 2;
      case 2: {
        if (tag == 18) {
         parse_gateways:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateways()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gateways;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.get_nway_gateways_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.get_nway_gateways_rsp)
  return false;
#undef DO_
}

void get_nway_gateways_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.get_nway_gateways_rsp)
  // required .nway_fs_opterator.nway_op_status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .nway_fs_opterator.nway_gateway gateways = 2;
  for (int i = 0; i < this->gateways_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gateways(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.get_nway_gateways_rsp)
}

::google::protobuf::uint8* get_nway_gateways_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.get_nway_gateways_rsp)
  // required .nway_fs_opterator.nway_op_status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .nway_fs_opterator.nway_gateway gateways = 2;
  for (int i = 0; i < this->gateways_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gateways(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.get_nway_gateways_rsp)
  return target;
}

int get_nway_gateways_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nway_fs_opterator.nway_op_status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .nway_fs_opterator.nway_gateway gateways = 2;
  total_size += 1 * this->gateways_size();
  for (int i = 0; i < this->gateways_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateways(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_nway_gateways_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_nway_gateways_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_nway_gateways_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_nway_gateways_rsp::MergeFrom(const get_nway_gateways_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gateways_.MergeFrom(from.gateways_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_nway_gateways_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_nway_gateways_rsp::CopyFrom(const get_nway_gateways_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_nway_gateways_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gateways())) return false;
  return true;
}

void get_nway_gateways_rsp::Swap(get_nway_gateways_rsp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    gateways_.Swap(&other->gateways_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_nway_gateways_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_nway_gateways_rsp_descriptor_;
  metadata.reflection = get_nway_gateways_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_nway_gateway_req::kGatewayFieldNumber;
#endif  // !_MSC_VER

add_nway_gateway_req::add_nway_gateway_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.add_nway_gateway_req)
}

void add_nway_gateway_req::InitAsDefaultInstance() {
  gateway_ = const_cast< ::nway_fs_opterator::nway_gateway*>(&::nway_fs_opterator::nway_gateway::default_instance());
}

add_nway_gateway_req::add_nway_gateway_req(const add_nway_gateway_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.add_nway_gateway_req)
}

void add_nway_gateway_req::SharedCtor() {
  _cached_size_ = 0;
  gateway_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_nway_gateway_req::~add_nway_gateway_req() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.add_nway_gateway_req)
  SharedDtor();
}

void add_nway_gateway_req::SharedDtor() {
  if (this != default_instance_) {
    delete gateway_;
  }
}

void add_nway_gateway_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_nway_gateway_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_nway_gateway_req_descriptor_;
}

const add_nway_gateway_req& add_nway_gateway_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

add_nway_gateway_req* add_nway_gateway_req::default_instance_ = NULL;

add_nway_gateway_req* add_nway_gateway_req::New() const {
  return new add_nway_gateway_req;
}

void add_nway_gateway_req::Clear() {
  if (has_gateway()) {
    if (gateway_ != NULL) gateway_->::nway_fs_opterator::nway_gateway::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_nway_gateway_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.add_nway_gateway_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nway_fs_opterator.nway_gateway gateway = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateway()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.add_nway_gateway_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.add_nway_gateway_req)
  return false;
#undef DO_
}

void add_nway_gateway_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.add_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.add_nway_gateway_req)
}

::google::protobuf::uint8* add_nway_gateway_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.add_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.add_nway_gateway_req)
  return target;
}

int add_nway_gateway_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nway_fs_opterator.nway_gateway gateway = 1;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateway());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_nway_gateway_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_nway_gateway_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_nway_gateway_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_nway_gateway_req::MergeFrom(const add_nway_gateway_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway()) {
      mutable_gateway()->::nway_fs_opterator::nway_gateway::MergeFrom(from.gateway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_nway_gateway_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_nway_gateway_req::CopyFrom(const add_nway_gateway_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_nway_gateway_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gateway()) {
    if (!this->gateway().IsInitialized()) return false;
  }
  return true;
}

void add_nway_gateway_req::Swap(add_nway_gateway_req* other) {
  if (other != this) {
    std::swap(gateway_, other->gateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_nway_gateway_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_nway_gateway_req_descriptor_;
  metadata.reflection = add_nway_gateway_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_nway_gateway_rsp::kGatewayNameFieldNumber;
const int add_nway_gateway_rsp::kStatusFieldNumber;
const int add_nway_gateway_rsp::kResTextFieldNumber;
#endif  // !_MSC_VER

add_nway_gateway_rsp::add_nway_gateway_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.add_nway_gateway_rsp)
}

void add_nway_gateway_rsp::InitAsDefaultInstance() {
}

add_nway_gateway_rsp::add_nway_gateway_rsp(const add_nway_gateway_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.add_nway_gateway_rsp)
}

void add_nway_gateway_rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateway_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  res_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_nway_gateway_rsp::~add_nway_gateway_rsp() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.add_nway_gateway_rsp)
  SharedDtor();
}

void add_nway_gateway_rsp::SharedDtor() {
  if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gateway_name_;
  }
  if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete res_text_;
  }
  if (this != default_instance_) {
  }
}

void add_nway_gateway_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_nway_gateway_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_nway_gateway_rsp_descriptor_;
}

const add_nway_gateway_rsp& add_nway_gateway_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

add_nway_gateway_rsp* add_nway_gateway_rsp::default_instance_ = NULL;

add_nway_gateway_rsp* add_nway_gateway_rsp::New() const {
  return new add_nway_gateway_rsp;
}

void add_nway_gateway_rsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gateway_name()) {
      if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gateway_name_->clear();
      }
    }
    status_ = 1;
    if (has_res_text()) {
      if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        res_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_nway_gateway_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.add_nway_gateway_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gateway_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gateway_name().data(), this->gateway_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gateway_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .nway_fs_opterator.nway_op_status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nway_fs_opterator::nway_op_status_IsValid(value)) {
            set_status(static_cast< ::nway_fs_opterator::nway_op_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res_text;
        break;
      }

      // optional string res_text = 3;
      case 3: {
        if (tag == 26) {
         parse_res_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_text().data(), this->res_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "res_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.add_nway_gateway_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.add_nway_gateway_rsp)
  return false;
#undef DO_
}

void add_nway_gateway_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.add_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_name(), output);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->res_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.add_nway_gateway_rsp)
}

::google::protobuf::uint8* add_nway_gateway_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.add_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_name(), target);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.add_nway_gateway_rsp)
  return target;
}

int add_nway_gateway_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gateway_name = 1;
    if (has_gateway_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway_name());
    }

    // required .nway_fs_opterator.nway_op_status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string res_text = 3;
    if (has_res_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_nway_gateway_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_nway_gateway_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_nway_gateway_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_nway_gateway_rsp::MergeFrom(const add_nway_gateway_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway_name()) {
      set_gateway_name(from.gateway_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_res_text()) {
      set_res_text(from.res_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_nway_gateway_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_nway_gateway_rsp::CopyFrom(const add_nway_gateway_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_nway_gateway_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void add_nway_gateway_rsp::Swap(add_nway_gateway_rsp* other) {
  if (other != this) {
    std::swap(gateway_name_, other->gateway_name_);
    std::swap(status_, other->status_);
    std::swap(res_text_, other->res_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_nway_gateway_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_nway_gateway_rsp_descriptor_;
  metadata.reflection = add_nway_gateway_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int edit_nway_gateway_req::kGatewayFieldNumber;
#endif  // !_MSC_VER

edit_nway_gateway_req::edit_nway_gateway_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.edit_nway_gateway_req)
}

void edit_nway_gateway_req::InitAsDefaultInstance() {
  gateway_ = const_cast< ::nway_fs_opterator::nway_gateway*>(&::nway_fs_opterator::nway_gateway::default_instance());
}

edit_nway_gateway_req::edit_nway_gateway_req(const edit_nway_gateway_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.edit_nway_gateway_req)
}

void edit_nway_gateway_req::SharedCtor() {
  _cached_size_ = 0;
  gateway_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

edit_nway_gateway_req::~edit_nway_gateway_req() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.edit_nway_gateway_req)
  SharedDtor();
}

void edit_nway_gateway_req::SharedDtor() {
  if (this != default_instance_) {
    delete gateway_;
  }
}

void edit_nway_gateway_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* edit_nway_gateway_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return edit_nway_gateway_req_descriptor_;
}

const edit_nway_gateway_req& edit_nway_gateway_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

edit_nway_gateway_req* edit_nway_gateway_req::default_instance_ = NULL;

edit_nway_gateway_req* edit_nway_gateway_req::New() const {
  return new edit_nway_gateway_req;
}

void edit_nway_gateway_req::Clear() {
  if (has_gateway()) {
    if (gateway_ != NULL) gateway_->::nway_fs_opterator::nway_gateway::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool edit_nway_gateway_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.edit_nway_gateway_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nway_fs_opterator.nway_gateway gateway = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateway()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.edit_nway_gateway_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.edit_nway_gateway_req)
  return false;
#undef DO_
}

void edit_nway_gateway_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.edit_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.edit_nway_gateway_req)
}

::google::protobuf::uint8* edit_nway_gateway_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.edit_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.edit_nway_gateway_req)
  return target;
}

int edit_nway_gateway_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nway_fs_opterator.nway_gateway gateway = 1;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateway());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void edit_nway_gateway_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const edit_nway_gateway_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const edit_nway_gateway_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void edit_nway_gateway_req::MergeFrom(const edit_nway_gateway_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway()) {
      mutable_gateway()->::nway_fs_opterator::nway_gateway::MergeFrom(from.gateway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void edit_nway_gateway_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_nway_gateway_req::CopyFrom(const edit_nway_gateway_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_nway_gateway_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gateway()) {
    if (!this->gateway().IsInitialized()) return false;
  }
  return true;
}

void edit_nway_gateway_req::Swap(edit_nway_gateway_req* other) {
  if (other != this) {
    std::swap(gateway_, other->gateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata edit_nway_gateway_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = edit_nway_gateway_req_descriptor_;
  metadata.reflection = edit_nway_gateway_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int edit_nway_gateway_rsp::kGatewayNameFieldNumber;
const int edit_nway_gateway_rsp::kStatusFieldNumber;
const int edit_nway_gateway_rsp::kResTextFieldNumber;
#endif  // !_MSC_VER

edit_nway_gateway_rsp::edit_nway_gateway_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.edit_nway_gateway_rsp)
}

void edit_nway_gateway_rsp::InitAsDefaultInstance() {
}

edit_nway_gateway_rsp::edit_nway_gateway_rsp(const edit_nway_gateway_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.edit_nway_gateway_rsp)
}

void edit_nway_gateway_rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateway_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  res_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

edit_nway_gateway_rsp::~edit_nway_gateway_rsp() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.edit_nway_gateway_rsp)
  SharedDtor();
}

void edit_nway_gateway_rsp::SharedDtor() {
  if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gateway_name_;
  }
  if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete res_text_;
  }
  if (this != default_instance_) {
  }
}

void edit_nway_gateway_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* edit_nway_gateway_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return edit_nway_gateway_rsp_descriptor_;
}

const edit_nway_gateway_rsp& edit_nway_gateway_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

edit_nway_gateway_rsp* edit_nway_gateway_rsp::default_instance_ = NULL;

edit_nway_gateway_rsp* edit_nway_gateway_rsp::New() const {
  return new edit_nway_gateway_rsp;
}

void edit_nway_gateway_rsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gateway_name()) {
      if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gateway_name_->clear();
      }
    }
    status_ = 1;
    if (has_res_text()) {
      if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        res_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool edit_nway_gateway_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.edit_nway_gateway_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gateway_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gateway_name().data(), this->gateway_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gateway_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .nway_fs_opterator.nway_op_status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nway_fs_opterator::nway_op_status_IsValid(value)) {
            set_status(static_cast< ::nway_fs_opterator::nway_op_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res_text;
        break;
      }

      // optional string res_text = 3;
      case 3: {
        if (tag == 26) {
         parse_res_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_text().data(), this->res_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "res_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.edit_nway_gateway_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.edit_nway_gateway_rsp)
  return false;
#undef DO_
}

void edit_nway_gateway_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.edit_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_name(), output);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->res_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.edit_nway_gateway_rsp)
}

::google::protobuf::uint8* edit_nway_gateway_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.edit_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_name(), target);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.edit_nway_gateway_rsp)
  return target;
}

int edit_nway_gateway_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gateway_name = 1;
    if (has_gateway_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway_name());
    }

    // required .nway_fs_opterator.nway_op_status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string res_text = 3;
    if (has_res_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void edit_nway_gateway_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const edit_nway_gateway_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const edit_nway_gateway_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void edit_nway_gateway_rsp::MergeFrom(const edit_nway_gateway_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway_name()) {
      set_gateway_name(from.gateway_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_res_text()) {
      set_res_text(from.res_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void edit_nway_gateway_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_nway_gateway_rsp::CopyFrom(const edit_nway_gateway_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_nway_gateway_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void edit_nway_gateway_rsp::Swap(edit_nway_gateway_rsp* other) {
  if (other != this) {
    std::swap(gateway_name_, other->gateway_name_);
    std::swap(status_, other->status_);
    std::swap(res_text_, other->res_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata edit_nway_gateway_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = edit_nway_gateway_rsp_descriptor_;
  metadata.reflection = edit_nway_gateway_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int erase_nway_gateway_req::kGatewayFieldNumber;
#endif  // !_MSC_VER

erase_nway_gateway_req::erase_nway_gateway_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.erase_nway_gateway_req)
}

void erase_nway_gateway_req::InitAsDefaultInstance() {
  gateway_ = const_cast< ::nway_fs_opterator::nway_gateway*>(&::nway_fs_opterator::nway_gateway::default_instance());
}

erase_nway_gateway_req::erase_nway_gateway_req(const erase_nway_gateway_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.erase_nway_gateway_req)
}

void erase_nway_gateway_req::SharedCtor() {
  _cached_size_ = 0;
  gateway_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

erase_nway_gateway_req::~erase_nway_gateway_req() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.erase_nway_gateway_req)
  SharedDtor();
}

void erase_nway_gateway_req::SharedDtor() {
  if (this != default_instance_) {
    delete gateway_;
  }
}

void erase_nway_gateway_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* erase_nway_gateway_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return erase_nway_gateway_req_descriptor_;
}

const erase_nway_gateway_req& erase_nway_gateway_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

erase_nway_gateway_req* erase_nway_gateway_req::default_instance_ = NULL;

erase_nway_gateway_req* erase_nway_gateway_req::New() const {
  return new erase_nway_gateway_req;
}

void erase_nway_gateway_req::Clear() {
  if (has_gateway()) {
    if (gateway_ != NULL) gateway_->::nway_fs_opterator::nway_gateway::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool erase_nway_gateway_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.erase_nway_gateway_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nway_fs_opterator.nway_gateway gateway = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateway()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.erase_nway_gateway_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.erase_nway_gateway_req)
  return false;
#undef DO_
}

void erase_nway_gateway_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.erase_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.erase_nway_gateway_req)
}

::google::protobuf::uint8* erase_nway_gateway_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.erase_nway_gateway_req)
  // required .nway_fs_opterator.nway_gateway gateway = 1;
  if (has_gateway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.erase_nway_gateway_req)
  return target;
}

int erase_nway_gateway_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nway_fs_opterator.nway_gateway gateway = 1;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateway());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void erase_nway_gateway_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const erase_nway_gateway_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const erase_nway_gateway_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void erase_nway_gateway_req::MergeFrom(const erase_nway_gateway_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway()) {
      mutable_gateway()->::nway_fs_opterator::nway_gateway::MergeFrom(from.gateway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void erase_nway_gateway_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void erase_nway_gateway_req::CopyFrom(const erase_nway_gateway_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool erase_nway_gateway_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gateway()) {
    if (!this->gateway().IsInitialized()) return false;
  }
  return true;
}

void erase_nway_gateway_req::Swap(erase_nway_gateway_req* other) {
  if (other != this) {
    std::swap(gateway_, other->gateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata erase_nway_gateway_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = erase_nway_gateway_req_descriptor_;
  metadata.reflection = erase_nway_gateway_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int erase_nway_gateway_rsp::kGatewayNameFieldNumber;
const int erase_nway_gateway_rsp::kStatusFieldNumber;
const int erase_nway_gateway_rsp::kResTextFieldNumber;
#endif  // !_MSC_VER

erase_nway_gateway_rsp::erase_nway_gateway_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.erase_nway_gateway_rsp)
}

void erase_nway_gateway_rsp::InitAsDefaultInstance() {
}

erase_nway_gateway_rsp::erase_nway_gateway_rsp(const erase_nway_gateway_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.erase_nway_gateway_rsp)
}

void erase_nway_gateway_rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateway_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  res_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

erase_nway_gateway_rsp::~erase_nway_gateway_rsp() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.erase_nway_gateway_rsp)
  SharedDtor();
}

void erase_nway_gateway_rsp::SharedDtor() {
  if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gateway_name_;
  }
  if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete res_text_;
  }
  if (this != default_instance_) {
  }
}

void erase_nway_gateway_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* erase_nway_gateway_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return erase_nway_gateway_rsp_descriptor_;
}

const erase_nway_gateway_rsp& erase_nway_gateway_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

erase_nway_gateway_rsp* erase_nway_gateway_rsp::default_instance_ = NULL;

erase_nway_gateway_rsp* erase_nway_gateway_rsp::New() const {
  return new erase_nway_gateway_rsp;
}

void erase_nway_gateway_rsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gateway_name()) {
      if (gateway_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gateway_name_->clear();
      }
    }
    status_ = 1;
    if (has_res_text()) {
      if (res_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        res_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool erase_nway_gateway_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.erase_nway_gateway_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gateway_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gateway_name().data(), this->gateway_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gateway_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .nway_fs_opterator.nway_op_status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nway_fs_opterator::nway_op_status_IsValid(value)) {
            set_status(static_cast< ::nway_fs_opterator::nway_op_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res_text;
        break;
      }

      // optional string res_text = 3;
      case 3: {
        if (tag == 26) {
         parse_res_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_text().data(), this->res_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "res_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.erase_nway_gateway_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.erase_nway_gateway_rsp)
  return false;
#undef DO_
}

void erase_nway_gateway_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.erase_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_name(), output);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->res_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.erase_nway_gateway_rsp)
}

::google::protobuf::uint8* erase_nway_gateway_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.erase_nway_gateway_rsp)
  // required string gateway_name = 1;
  if (has_gateway_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway_name().data(), this->gateway_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_name(), target);
  }

  // required .nway_fs_opterator.nway_op_status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional string res_text = 3;
  if (has_res_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_text().data(), this->res_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.erase_nway_gateway_rsp)
  return target;
}

int erase_nway_gateway_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gateway_name = 1;
    if (has_gateway_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway_name());
    }

    // required .nway_fs_opterator.nway_op_status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string res_text = 3;
    if (has_res_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void erase_nway_gateway_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const erase_nway_gateway_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const erase_nway_gateway_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void erase_nway_gateway_rsp::MergeFrom(const erase_nway_gateway_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateway_name()) {
      set_gateway_name(from.gateway_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_res_text()) {
      set_res_text(from.res_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void erase_nway_gateway_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void erase_nway_gateway_rsp::CopyFrom(const erase_nway_gateway_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool erase_nway_gateway_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void erase_nway_gateway_rsp::Swap(erase_nway_gateway_rsp* other) {
  if (other != this) {
    std::swap(gateway_name_, other->gateway_name_);
    std::swap(status_, other->status_);
    std::swap(res_text_, other->res_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata erase_nway_gateway_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = erase_nway_gateway_rsp_descriptor_;
  metadata.reflection = erase_nway_gateway_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reload_gateway_req::kHostFieldNumber;
const int reload_gateway_req::kPortFieldNumber;
const int reload_gateway_req::kPasswordFieldNumber;
#endif  // !_MSC_VER

reload_gateway_req::reload_gateway_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.reload_gateway_req)
}

void reload_gateway_req::InitAsDefaultInstance() {
}

reload_gateway_req::reload_gateway_req(const reload_gateway_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.reload_gateway_req)
}

void reload_gateway_req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reload_gateway_req::~reload_gateway_req() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.reload_gateway_req)
  SharedDtor();
}

void reload_gateway_req::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void reload_gateway_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reload_gateway_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reload_gateway_req_descriptor_;
}

const reload_gateway_req& reload_gateway_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

reload_gateway_req* reload_gateway_req::default_instance_ = NULL;

reload_gateway_req* reload_gateway_req::New() const {
  return new reload_gateway_req;
}

void reload_gateway_req::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        port_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reload_gateway_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.reload_gateway_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // optional string port = 2;
      case 2: {
        if (tag == 18) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.reload_gateway_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.reload_gateway_req)
  return false;
#undef DO_
}

void reload_gateway_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.reload_gateway_req)
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.reload_gateway_req)
}

::google::protobuf::uint8* reload_gateway_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.reload_gateway_req)
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.reload_gateway_req)
  return target;
}

int reload_gateway_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reload_gateway_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reload_gateway_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reload_gateway_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reload_gateway_req::MergeFrom(const reload_gateway_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reload_gateway_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reload_gateway_req::CopyFrom(const reload_gateway_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reload_gateway_req::IsInitialized() const {

  return true;
}

void reload_gateway_req::Swap(reload_gateway_req* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reload_gateway_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reload_gateway_req_descriptor_;
  metadata.reflection = reload_gateway_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reload_gateway_rsp::kStatusFieldNumber;
#endif  // !_MSC_VER

reload_gateway_rsp::reload_gateway_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nway_fs_opterator.reload_gateway_rsp)
}

void reload_gateway_rsp::InitAsDefaultInstance() {
}

reload_gateway_rsp::reload_gateway_rsp(const reload_gateway_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nway_fs_opterator.reload_gateway_rsp)
}

void reload_gateway_rsp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reload_gateway_rsp::~reload_gateway_rsp() {
  // @@protoc_insertion_point(destructor:nway_fs_opterator.reload_gateway_rsp)
  SharedDtor();
}

void reload_gateway_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reload_gateway_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reload_gateway_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reload_gateway_rsp_descriptor_;
}

const reload_gateway_rsp& reload_gateway_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_5fop_2eproto();
  return *default_instance_;
}

reload_gateway_rsp* reload_gateway_rsp::default_instance_ = NULL;

reload_gateway_rsp* reload_gateway_rsp::New() const {
  return new reload_gateway_rsp;
}

void reload_gateway_rsp::Clear() {
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reload_gateway_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nway_fs_opterator.reload_gateway_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nway_fs_opterator.nway_op_status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nway_fs_opterator::nway_op_status_IsValid(value)) {
            set_status(static_cast< ::nway_fs_opterator::nway_op_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nway_fs_opterator.reload_gateway_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nway_fs_opterator.reload_gateway_rsp)
  return false;
#undef DO_
}

void reload_gateway_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nway_fs_opterator.reload_gateway_rsp)
  // required .nway_fs_opterator.nway_op_status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nway_fs_opterator.reload_gateway_rsp)
}

::google::protobuf::uint8* reload_gateway_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nway_fs_opterator.reload_gateway_rsp)
  // required .nway_fs_opterator.nway_op_status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nway_fs_opterator.reload_gateway_rsp)
  return target;
}

int reload_gateway_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nway_fs_opterator.nway_op_status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reload_gateway_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reload_gateway_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reload_gateway_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reload_gateway_rsp::MergeFrom(const reload_gateway_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reload_gateway_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reload_gateway_rsp::CopyFrom(const reload_gateway_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reload_gateway_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void reload_gateway_rsp::Swap(reload_gateway_rsp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reload_gateway_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reload_gateway_rsp_descriptor_;
  metadata.reflection = reload_gateway_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nway_fs_opterator

// @@protoc_insertion_point(global_scope)
